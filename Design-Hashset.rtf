{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red89\green138\blue67;
\red202\green202\blue202;\red70\green137\blue204;\red67\green192\blue160;\red140\green211\blue254;\red212\green214\blue154;
\red183\green111\blue179;\red167\green197\blue152;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\csgray\c100000;\cssrgb\c41569\c60000\c33333;
\cssrgb\c83137\c83137\c83137;\cssrgb\c33725\c61176\c83922;\cssrgb\c30588\c78824\c69020;\cssrgb\c61176\c86275\c99608;\cssrgb\c86275\c86275\c66667;
\cssrgb\c77255\c52549\c75294;\cssrgb\c70980\c80784\c65882;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
//TC: Add, Remove, Contains : O(1)\
//SC: O(n x n)\
// Did this code successfully run on Leetcode : Yes\
// Any problem you faced while coding this : No\
\
//* ORIGINAL APPROACH */\
\
// class Node\{\
//     int data;\
//     Node next;\
\
//     public Node(int key)\{\
//         this.data = key;\
//         this.next = null;\
//     \}\
// \}\
\
// class MyHashSet \{\
\
//     int size;\
//     Node[] arr;\
\
//     public MyHashSet() \{\
//         this.size = 100;\
//         this.arr = new Node[size];\
//     \}\
    \
//     public void add(int key) \{\
//         int ind = key % size;\
//         Node ptr = arr[ind];\
//         if(!contains(key))\{\
//             if(ptr == null)\
//                 arr[ind] = new Node(key);\
//             else \{\
//                 while(ptr.next != null)\
//                     ptr = ptr.next;\
//                 ptr.next = new Node(key);\
//             \}\
//         \}\
//     \}\
    \
//     public void remove(int key) \{\
//         int ind = key % size;\
//         if(contains(key))\{\
//             if(arr[ind].data == key)\{\
//                 arr[ind] = arr[ind].next;\
//             \} else \{\
//                 Node ptr = arr[ind];\
//                 Node prev = ptr;\
//                 while(ptr != null)\{\
//                     if(ptr.data == key)\{\
//                         prev.next = ptr.next;\
//                         break;\
//                     \}\
//                     prev = ptr;\
//                     ptr = ptr.next;\
//                 \}\
//             \}\
//         \}\
//     \}\
    \
//     public boolean contains(int key) \{\
//         int ind = key % size;\
//         Node ptr = arr[ind];\
//         while (ptr != null)\{\
//             if(ptr.data == key)\
//                 return true;\
//             ptr = ptr.next;\
//         \}\
//         return false;\
//     \}\
// \}\
\
//* CLASS APPROACH */\
\
\pard\pardeftab720\partightenfactor0
\cf2 class MyHashSet \{\
\
    boolean[][] hashSetArray;\
    int horL;\
    int verL;\
\
    int hash1(int val)\{\
        return val % horL;\
    \}\
\
    int hash2(int val)\{\
        return val / verL;\
    \}\
\
    public MyHashSet() \{\
        horL = 1000;\
        verL = 1000;\
        hashSetArray = new boolean[horL][];\
    \}\
    \
    public void add(int key) \{\
        int hInd = hash1(key);\
        if(hashSetArray[hInd] == null)\{\
            if(hInd == 0)\{\
                hashSetArray[hInd] = new boolean[verL+1];\
            \} else \{\
                hashSetArray[hInd] = new boolean[verL];\
            \}\
        \}\
        int vInd = hash2(key);\
        hashSetArray[hInd][vInd] = true;\
    \}\
    \
    public void remove(int key) \{\
        int hInd = hash1(key);\
        if(hashSetArray[hInd] != null)\{\
            int vInd = hash2(key);\
            hashSetArray[hInd][vInd] = false;\
        \}\
    \}\
    \
    public boolean contains(int key) \{\
        int hInd = hash1(key);\
        if(hashSetArray[hInd] == null)\
            return false;\
        int vInd = hash2(key);\
        return hashSetArray[hInd][vInd];\
    \}\
\}\
\
\pard\pardeftab720\partightenfactor0
\cf2 /**\
 * Your MyHashSet object will be instantiated and called as such:\
 * MyHashSet obj = new MyHashSet();\
 * obj.add(key);\
 * obj.remove(key);\
 * boolean param_3 = obj.contains(key);\
 */\
}