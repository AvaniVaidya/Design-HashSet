{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red89\green138\blue67;
\red202\green202\blue202;\red70\green137\blue204;\red67\green192\blue160;\red140\green211\blue254;\red212\green214\blue154;
\red183\green111\blue179;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\csgray\c100000;\cssrgb\c41569\c60000\c33333;
\cssrgb\c83137\c83137\c83137;\cssrgb\c33725\c61176\c83922;\cssrgb\c30588\c78824\c69020;\cssrgb\c61176\c86275\c99608;\cssrgb\c86275\c86275\c66667;
\cssrgb\c77255\c52549\c75294;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 // * ORIGINAL APPROACH */\strokec5 \
\
\strokec4 // class Node\{\strokec5 \
\strokec4 //     int data;\strokec5 \
\strokec4 //     int min;\strokec5 \
\strokec4 //     Node next;\strokec5 \
\
\strokec4 //     public Node(int val, int minV)\{\strokec5 \
\strokec4 //         this.data = val;\strokec5 \
\strokec4 //         this.min = minV;\strokec5 \
\strokec4 //         this.next = null;\strokec5 \
\strokec4 //     \}\strokec5 \
\strokec4 // \}\strokec5 \
\
\strokec4 // class MinStack \{\strokec5 \
\
\strokec4 //     Node head;\strokec5 \
\
\strokec4 //     public MinStack() \{\strokec5 \
\strokec4 //         head = null;\strokec5 \
\strokec4 //     \}\strokec5 \
    \
\strokec4 //     public void push(int val) \{\strokec5 \
\strokec4 //         if(head == null)\{\strokec5 \
\strokec4 //             head = new Node(val, val);\strokec5 \
\strokec4 //         \} else \{\strokec5 \
\strokec4 //             Node ptr = new Node(val, Math.min(val, head.min));\strokec5 \
\strokec4 //             ptr.next = head;\strokec5 \
\strokec4 //             head = ptr;\strokec5 \
\strokec4 //         \}\strokec5 \
\strokec4 //     \}\strokec5 \
    \
\strokec4 //     public void pop() \{\strokec5 \
        \
\strokec4 //         if(head != null)\{\strokec5 \
\strokec4 //             Node ptr = head;\strokec5 \
\strokec4 //             head = head.next;\strokec5 \
\strokec4 //             ptr.next = null;\strokec5 \
\strokec4 //         \}\strokec5 \
\strokec4 //     \}\strokec5 \
    \
\strokec4 //     public int top() \{\strokec5 \
\strokec4 //         if(head == null)\strokec5 \
\strokec4 //             return -1;\strokec5 \
\strokec4 //         else\{\strokec5 \
\strokec4 //             return head.data;\strokec5 \
\strokec4 //         \}\strokec5 \
\strokec4 //     \}\strokec5 \
    \
\strokec4 //     public int getMin() \{\strokec5 \
\strokec4 //         if(head == null)\strokec5 \
\strokec4 //             return -1;\strokec5 \
\strokec4 //         else\{\strokec5 \
\strokec4 //             return head.min;\strokec5 \
\strokec4 //         \}\strokec5 \
\strokec4 //     \}\strokec5 \
\strokec4 // \}\strokec5 \
\
\strokec4 // * CLASS APPROACH */\strokec5 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec6 class\strokec5  \strokec7 Pair\strokec5 \{\
    \strokec7 int\strokec5  \strokec8 val\strokec5 ;\
    \strokec7 int\strokec5  \strokec8 min\strokec5 ;\
\
    \strokec6 public\strokec5  \strokec9 Pair\strokec5 (\strokec7 int\strokec5  \strokec8 val\strokec5 , \strokec7 int\strokec5  \strokec8 min\strokec5 )\{\
        \strokec6 this\strokec5 .\strokec8 val\strokec5  = val;\
        \strokec6 this\strokec5 .\strokec8 min\strokec5  = min;\
    \}\
\}\
\
\strokec6 class\strokec5  \strokec7 MinStack\strokec5  \{\
\
    \strokec7 Stack\strokec5 <\strokec7 Pair\strokec5 > \strokec8 minStack\strokec5 ;\
    \strokec7 int\strokec5  \strokec8 min\strokec5 ;\
\
    \strokec6 public\strokec5  \strokec9 MinStack\strokec5 () \{\
        minStack = \strokec10 new\strokec5  \strokec7 Stack\strokec5 <\strokec7 Pair\strokec5 >();\
        min = \strokec8 Integer\strokec5 .\strokec8 MAX_VALUE\strokec5 ;\
    \}\
    \
    \strokec6 public\strokec5  \strokec7 void\strokec5  \strokec9 push\strokec5 (\strokec7 int\strokec5  \strokec8 val\strokec5 ) \{\
        min = \strokec8 Math\strokec5 .\strokec9 min\strokec5 (val, min);\
        \strokec7 Pair\strokec5  \strokec8 obj\strokec5  = \strokec10 new\strokec5  \strokec9 Pair\strokec5 (val, min);\
        \strokec8 minStack\strokec5 .\strokec9 push\strokec5 (obj);\
    \}\
    \
    \strokec6 public\strokec5  \strokec7 void\strokec5  \strokec9 pop\strokec5 () \{\
        \strokec8 minStack\strokec5 .\strokec9 pop\strokec5 ();\
        min = !\strokec8 minStack\strokec5 .\strokec9 isEmpty\strokec5 () \strokec10 ?\strokec5  \strokec8 minStack\strokec5 .\strokec9 peek\strokec5 ().\strokec8 min\strokec5  \strokec10 :\strokec5  \strokec8 Integer\strokec5 .\strokec8 MAX_VALUE\strokec5 ;\
    \}\
    \
    \strokec6 public\strokec5  \strokec7 int\strokec5  \strokec9 top\strokec5 () \{\
        \strokec10 return\strokec5  \strokec8 minStack\strokec5 .\strokec9 peek\strokec5 ().\strokec8 val\strokec5 ;\
    \}\
    \
    \strokec6 public\strokec5  \strokec7 int\strokec5  \strokec9 getMin\strokec5 () \{\
        \strokec10 return\strokec5  \strokec8 minStack\strokec5 .\strokec9 peek\strokec5 ().\strokec8 min\strokec5 ;\
    \}\
\}\
\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec4 /**\strokec5 \
\strokec4  * Your MinStack object will be instantiated and called as such:\strokec5 \
\strokec4  * MinStack obj = new MinStack();\strokec5 \
\strokec4  * obj.push(val);\strokec5 \
\strokec4  * obj.pop();\strokec5 \
\strokec4  * int param_3 = obj.top();\strokec5 \
\strokec4  * int param_4 = obj.getMin();\strokec5 \
\strokec4  */\strokec5 \
}